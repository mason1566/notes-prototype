The FileSystem object offers programmer-defined access to certain files and directories on the user's system. This class is designed to be a singleton pattern.

Dependencies:
    - @tauri-apps/plugin-fs
    - @tauri-apps/plugin-dialog
    - @tauri-apps/plugin-store
    - DirEntry class from @tauri-apps/plugin-fs
    - FileDescriptor class from src/system/fileDescriptor.ts

FileSystem Class Structure:
vars -
    protected static fileSystem: FileSystem | undefined;
methods - 
    private constructor();
    public static getFileSystem(): FileSystem;
    public async getFiles(directory?: string): Promise<FileDescriptor[]>;
    public async getEntries(directory?: string): Promise<DirEntry[]>;
    public async getDirectories(directory?: string): Promise<DirEntry[]>;
    public async openDirectoryDialog(): Promise<string>;
    public async createFile(file: FileDescriptor, directory?: string): Promise<void>;
    public async setDefaultDirectory(directory: string): Promise<void>;
    public async getDefaultDirectory(): Promise<string>;
    public async isDefaultDirectorySet(): Promise<boolean>;
    public async fetchFileContents(file: FileDescriptor, directory?: string): Promise<string>;
    public async deleteFile(file: FileDescriptor, directory?: string): Promise<void>;
    public async updateFileContents(file: FileDescriptor, contents: string, directory?: string): Promise<void>;
    public async getFilesOfType(extension: string, directory?: string): Promise<FileDescriptor[]>;